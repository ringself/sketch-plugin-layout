/**
 * use Sketch blade
 * Authorized by Jiamiu, all rights reserved.
 */

var environ = [[NSProcessInfo processInfo] environment],
    in_sandbox= (nil != [environ objectForKey:@"APP_SANDBOX_CONTAINER_ID"])

if(in_sandbox){
    print("We’re sandboxed: here be dragons")
}

AppSandbox = function(){ }
AppSandbox.prototype.authorize = function(path, callback){
    log("AppSandbox.authorize("+path+")")
    var success = false

    if (in_sandbox) {
        var url = [[[NSURL fileURLWithPath:path] URLByStandardizingPath] URLByResolvingSymlinksInPath],
        allowedUrl = false

        // Key for bookmark data:
        var bd_key = this.key_for_url(url)

        // this.clear_key(bd_key) // For debug only, this clears the key we're looking for :P

        // Bookmark
        var bookmark = this.get_data_for_key(bd_key)
        if(!bookmark){
            log("– No bookmark found, let's create one")
            var target = this.file_picker(url)
            bookmark = [target bookmarkDataWithOptions:NSURLBookmarkCreationWithSecurityScope
            includingResourceValuesForKeys:nil
            relativeToURL:nil
            error:{}]
            // Store bookmark
            this.set_data_for_key(bookmark,bd_key)
        } else {
            log("– Bookmark found")
        }
        log("  " + bookmark)

        // Thanks to @joethephish for this pointer (pun totally intended)
        var bookmarkDataIsStalePtr = MOPointer.alloc().init()
        var allowedURL = [NSURL URLByResolvingBookmarkData:bookmark
        options:NSURLBookmarkResolutionWithSecurityScope
        relativeToURL:nil
        bookmarkDataIsStale:bookmarkDataIsStalePtr
        error:{}]

        if(bookmarkDataIsStalePtr.value() != 0){
            log("— Bookmark data is stale")
            log(bookmarkDataIsStalePtr.value())
        }

        if(allowedURL) {
            success = true
        }
    } else {
        success = true
    }

    // [allowedUrl startAccessingSecurityScopedResource]
    callback.call(this,success)
    // [allowedUrl stopAccessingSecurityScopedResource]
}
AppSandbox.prototype.key_for_url = function(url){
    return "bd_" + [url absoluteString]
}
AppSandbox.prototype.clear_key = function(key){
    var def = [NSUserDefaults standardUserDefaults]
        [def setObject:nil forKey:key]
}
AppSandbox.prototype.file_picker = function(url){
    // Panel
    var openPanel = [NSOpenPanel openPanel]

        [openPanel setTitle:"Sketch Framer Authorization"]
    [openPanel setMessage:"Due to Apple's Sandboxing technology, Sketch needs your permission to write to this folder."];
    [openPanel setPrompt:"Authorize"];

    [openPanel setCanCreateDirectories:false]
    [openPanel setCanChooseFiles:true]
    [openPanel setCanChooseDirectories:true]
    [openPanel setAllowsMultipleSelection:false]
    [openPanel setShowsHiddenFiles:false]
    [openPanel setExtensionHidden:false]

    [openPanel setDirectoryURL:url]

    var openPanelButtonPressed = [openPanel runModal]
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
        allowedUrl = [openPanel URL]
    }
    return allowedUrl
}

AppSandbox.prototype.get_data_for_key = function(key){
    var def = [NSUserDefaults standardUserDefaults]
    return [def objectForKey:key]
}
AppSandbox.prototype.set_data_for_key = function(data,key){
    var defaults = [NSUserDefaults standardUserDefaults],
        default_values = [NSMutableDictionary dictionary]

            [default_values setObject:data forKey:key]
    [defaults registerDefaults:default_values]
}

// config
var Config = Config || (function(){

    var document_path = [[doc fileURL] path].replace( /\/[^\/]+\.sketch$/,'\/'),
        document_name = [doc displayName].replace(".sketch",""),
        target_folder = document_path + document_name,
        home_folder = "/Users/" + NSUserName(),
        images_folder = target_folder + "/images",
        css_folder = target_folder + "/css",
        js_folder = target_folder + "/js",
        plugin_folder = sketch.scriptPath.replace(/\/blade.sketchplugin$/,'')


    return {
        document_path : document_path,
        document_name : document_name,
        target_folder : target_folder,
        images_folder : images_folder,
        home_folder : home_folder,
        js_folder : js_folder,
        css_folder : css_folder,
        plugin_folder : plugin_folder,
        global_scripts : [{
            comment : 'global script : jquery-2.1.1.min.js',
            origin : plugin_folder + '/blade/lib/jquery-2.1.1.min.js',
            src : js_folder + '/jquery-2.1.1.min.js'
        }],
        global_styles : [{
            comment : 'global reset',
            origin : plugin_folder + '/blade/lib/reset.css',
            href : css_folder + '/reset.css'
        }],
        export_img_ext : ".png",
        show_error : true

    }
})()

//This file is base on Sam Deane's code, see the original license below

// --------------------------------------------------------------------------
// Miscellaneous Sketch utilities.
//
//  Copyright 2014 Sam Deane, Elegant Chaos. All rights reserved.
//  This source code is distributed under the terms of Elegant Chaos's
//  liberal license: http://www.elegantchaos.com/license/liberal
// --------------------------------------------------------------------------


var Util = Util || (function() {
    var my = {},persistent,console

    // perform a come code inside a try/catch block, and log out the error if something goes wrong
    my.execute = function(block) {
        try
        {
            block();
        }
        catch (e)
        {
            my.log(e);
        }
    }



    // return the Sketch version number
    // (we fish this out of the main info dictionary for the application)
    my.version = function() {
        var items = my.versionComponents();

        var result = items[0] + "." + items[1];
        if (items[2] != 0)
            result += "." + items[2];

        return result;
    }

    // return the Sketch version number, split into three components
    // (we fish this out of the main info dictionary for the application)
    my.versionComponents = function() {
        var info = [[NSBundle mainBundle] infoDictionary];
        var items = [[(info["CFBundleShortVersionString"]) componentsSeparatedByString:"."] mutableCopy];

        while(items.length() < 3)
            [items addObject:"0"];

        return items;
    }

    // return the main Sketch version number (eg 2 in 2.4.3)
    my.majorVersion = function() {
        var items = my.versionComponents();

        return items[0];
    }

    // return the minor Sketch version number (eg 4 in 2.4.3)
    my.minorVersion = function() {
        var items = my.versionComponents();

        return items[1];
    }

    // return the fix Sketch version number (eg 3 in 2.4.3)
    my.fixVersion = function() {
        var items = my.versionComponents();

        return items[2];
    }

    // return the exact Sketch build number
    // (we fish this out of the main info dictionary for the application)
    my.buildNumber = function() {
        var info = [[NSBundle mainBundle] infoDictionary];
        var result = info["CFBundleVersion"];

        return result;
    }

    // perform an action (in the way that a menu or button typically does)
    // what we're doing here is sending a command (an Objective-C method call)
    // down a chain of objects (the current window,
    // the current document, the application, etc) until one responds
    my.sendAction = function(commandToPerform) {
        try {
            [NSApp sendAction:commandToPerform to:nil from:doc]
        } catch(e) {
            my.log(e)
        }
    };

    // safe implementation of selection, which checks for it being nil
    // (which it can be before the user first selected anything)
    my.selection = function() {
        var selection = doc.selectedLayers();
        if (selection == null) {
            selection = [[NSArray alloc] init]
        }

        return selection;
    };

    // return a persistent window
    // this will make the window the first time it's called, but return the
    // same window next time (even if the next time is during a later execution of the script)
    my.persistentWindow = function(title, persistName, level, setup) {
        var window = persistent[persistName];
        if (window == null) {
            window = my.makeWindow(title, persistName, level, setup);
            persistent[persistName] = window;
        }

        return window;
    }

    // return a persistent panel
    // this will make the window the first time it's called, but return the
    // same window next time (even if the next time is during a later execution of the script)
    my.persistentPanel = function(title, persistName, setup) {
        var window = persistent[persistName];
        if (window == null) {
            window = my.makePanel(title, persistName, setup);
            persistent[persistName] = window;
        }

        return window;
    }

    // make a new window
    // this uses native Cocoa code to create a new window object, and set up various properties on it
    // for more details on NSWindow, see https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSWindow_Class/Reference/Reference.html
    my.makeWindow = function(title, autosave, level, setup) {
        var frame = NSMakeRect(0,0,512,128);
        var mask = NSTitledWindowMask + NSClosableWindowMask + NSMiniaturizableWindowMask + NSResizableWindowMask;
        var window = [[NSWindow alloc] initWithContentRect:frame styleMask:mask backing:NSBackingStoreBuffered defer:true];
        window.title = title;
        window.level = level;
        [window setFrameAutosaveName:autosave];

        setup(window);

        [window setReleasedWhenClosed:false];
        [window makeKeyAndOrderFront:nil];

        return window;
    }

    // make a new panel
    // this uses native Cocoa code to create a new panel object, and set up various properties on it
    // for more details on NSPanel, see https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSPanel_Class/Reference/Reference.html
    my.makePanel = function(title, autosave, setup) {
        var frame = NSMakeRect(0,0,512,128);
        var mask = NSTitledWindowMask + NSClosableWindowMask + NSMiniaturizableWindowMask + NSResizableWindowMask + NSUtilityWindowMask;
        var window = [[NSPanel alloc] initWithContentRect:frame styleMask:mask backing:NSBackingStoreBuffered defer:true];
        window.title = title;
        window.floatingPanel = true;
        [window setFrameAutosaveName:autosave];

        setup(window);

        [window setReleasedWhenClosed:false];
        [window makeKeyAndOrderFront:nil];

        return window;
    }

    // make a new log window
    // we use Cocoa here to create a native window, and then we create a scrollview+textview combination
    // as the context, which gives us a scrolling text field
    // as luck would have it, Apple have some documentation describing this process:
    // https://developer.apple.com/library/mac/documentation/cocoa/conceptual/TextUILayer/Tasks/TextInScrollView.html#//apple_ref/doc/uid/20000938-CJBBIAAF
    my.logWindow = function() {
        var window = my.persistentPanel("Console", "LogWindow", function(window) {
            var scrollview = [[NSScrollView alloc] initWithFrame:[[window contentView] frame]];
            var contentSize = [scrollview contentSize];

            [scrollview setBorderType:NSNoBorder];
            [scrollview setHasVerticalScroller:true];
            [scrollview setHasHorizontalScroller:true];
            [scrollview setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];

            var FLT_MAX = 3.40282347e+38;
            var view = [[NSTextView alloc] initWithFrame:NSMakeRect(0, 0, contentSize.width, contentSize.height)];
            [view setMinSize:NSMakeSize(0.0, contentSize.height)];
            [view setMaxSize:NSMakeSize(FLT_MAX, FLT_MAX)];
            [view setVerticallyResizable:true];
            [view setHorizontallyResizable:true];
            [view setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
            [[view textContainer] setContainerSize:NSMakeSize(FLT_MAX, FLT_MAX)];
            [[view textContainer] setWidthTracksTextView:false];

            [scrollview setDocumentView:view];
            [window setContentView:scrollview];
            [window makeFirstResponder:view];
        });

        return window;
    };

    // log something to our console window
    // we set the window up first if necessary, then
    // append the log message to the bottom of it and scroll the new line into view
    my.log = function(message) {
        if( !Config.show_error ){
            return
        }else{
            //first time
            if( !persistent ){
                persistent = [[NSThread mainThread] threadDictionary]
                console = persistent["console"]
            }

            if( arguments.length !== 1 ){
                message = Array.prototype.join.call( arguments, ", " )
            }

            var logWindow = my.logWindow();
            [logWindow makeKeyAndOrderFront:nil];

            var text = message;
            //var text = JSON.stringify(message);

            view = [[logWindow contentView] documentView];
            if (console == null)
                console = "";

            var now = new Date();
            var time = now.toLocaleTimeString().split(" ")[0];
            console = console + time + " " + text + "\n";
            [view setString:console];
            log(text);
            persistent["console"] = console;
            [view scrollRangeToVisible: NSMakeRange(view.string.length, 0)];
        }
    };

    my.launch = function(cmd, arguments) {
        var task = [[NSTask alloc] init];
        [task setLaunchPath:cmd];

        if (arguments)
            [task setArguments:arguments];

        var pipe = [NSPipe pipe];
        [task setStandardOutput: pipe];

        var file = [pipe fileHandleForReading];

        [task launch];

        var data = [file readDataToEndOfFile];
        var output = [[NSString alloc] initWithData: data encoding:NSUTF8StringEncoding];

        log(output);
    };

    my.save_file_from_string = function(filename, fileString) {
        new AppSandbox().authorize( Config.home_folder, function() {
            var path = [@"" stringByAppendingString:filename],
            str = [@"" stringByAppendingString:fileString];
//            var str = [[[NSString alloc] initWithString:fileString] autorelease]

//            fileString = null

            [str writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];
        })
    }

    var file_manager = [NSFileManager defaultManager]

    my.create_folders =function ( folders ){
        new AppSandbox().authorize( Config.home_folder, function(){
            var i = [folders count] - 1
            for( ; i >-1 ;i-- ){
                [file_manager createDirectoryAtPath:[folders objectAtIndex:i] withIntermediateDirectories:true attributes:nil error:nil];
            }
        })
    }

    my.remove_folder = function( folder ){
        Util.log("removing file at :"+folder)
            [file_manager removeItemAtPath:folder error:nil]
    }

    my.folder_exist = function( folder ){
        return [file_manager fileExistsAtPath:folder]
    }

    my.copy = function ( org, tar ){
        Util.log('copy file:' )
        Util.log( 'from: ' + org )
        Util.log( 'to  : ' + tar )

        if( [file_manager fileExistsAtPath:org]){
            [file_manager copyItemAtPath:org toPath:tar error:nil];
        }else{
            Util.log('cannot copy,file not exist: '+org)
        }
    }

    my.uniq = (function(){
        var cache = {}

        return function( str ){

            str = str ? str.replace("-","_") : 'noname'

            if( !cache[str] ){
                cache[str] = 1
                return str
            }else{
                cache[str] += 1
                return str + "-" + String(cache[str])
            }
        }
    })()

    var fontManager = [NSFontManager sharedFontManager]

    my.fontWeight = function( font ){
        return fontManager.weightOfFont(font)
    }

    my.toRGBA = function( color ){
        return 'rgba(' + String( color ).replace(/[\(\)]/g,'').split(' ').map(function(v){
            var t = v.split(":"),type = t[0],value=t[1]
            if( type !== 'a' ){
                return Math.round( Number(value) * 256)
            }
            return Number(value)
        }).join(',')+')'
    }

    my.style_to_string = function( styleObj ){
        return join( map( styleObj, function( styles ){
            return join( styles, ":",';\n')
        }), ' {\n', '\n}\n') + '\n}'
    }

    function join( obj, kvSplitor, itemSplitor ){
        if( typeof obj !== 'object') return false

        return  values( map( obj, function(v,k){
            return k+kvSplitor+v
        })).join( itemSplitor )
    }

    function map( obj, cb ){
        if( Object.prototype.toString.call(obj) == '[object Array]'){
            return obj.map(cb)
        }else if( typeof obj == 'object' ){
            var output = {}
            for( var i in obj ){
                if( obj.hasOwnProperty(i) && typeof obj[i] !== 'function' ) {
                    output[i] = cb(obj[i], i)
                }
            }
            return output
        }

        return false
    }

    function values( obj ) {
        var _values = []

        for( var i in obj ){
            if( obj.hasOwnProperty(i) && typeof obj[i] !== 'function' ) {
                _values.push( obj[i] )
            }
        }
        return _values
    }

    function in_array( array, item ){
        var found = false
        for( var i in array ){
            if( item == array[i] ){
                found = true
                break
            }
        }
        return found
    }

    function each( obj, iterator ){
        var i,length

        if( obj.count && obj.className ){
            length = [obj count]

            for( i=0;i<length;i++){
                iterator( [obj objectAtIndex:i], i)
            }
        }else if( Object.prototype.toString.call( obj) == '[object Array]'){
            length = obj.length
            for( i=0;i<length;i++){
                iterator( obj[i],i)
            }
        }else if( typeof obj == 'object'){
            for( i in obj ){
                iterator( obj[i], i)
            }
        }else{
            Util.log("cannot iterator this obj of "+ (obj.className ? obj.className() : (typeof obj)))
        }
    }

    function extend( tar, src ){
        each( src, function( v,k){
            if( Object.prototype.toString.call( v) == '[object Object]'){
                tar[k] = {}
                extend( tar[k], src[k])
            }else if( Object.prototype.toString.call( v) == '[object Array]'){
                tar[k] = []
                extend( tar[k], src[k])
            }else{
                tar[k] = src[k]
            }
        })

        return tar
    }

    function wrap_script( script ){
        if( typeof script == 'object'){
            var arr = script
            for( var i in arr ){
                if( typeof arr[i] == 'function' ){
                    arr[i] = wrap_execute_imediate( String(arr[i] ))
                }
            }
            script = arr.join(';\n')
        }

        return ';(function(){\n' + script + '\n})();\n'
    }

    function render_variables( vars ){
        var output = []
        for( var varName in vars ){
            if( typeof vars[varName] == 'object') {
                //object or array
                output.push(varName + '=' + JSON.stringify(vars[varName]))
            }else if( typeof vars[varName] == 'string'){
                //string
                output.push(varName + '="' + vars[varName]+'"')
            }else{
                //undefined bool number
                output.push( varName + '=' + String(vars[varName]) )
            }
        }
        return "var "+output.join(',')
    }

    function wrap_execute_imediate( functionStr ){
        return ';(' + functionStr +')();\n'
    }

    function script_to_string( scriptObj ){
        return wrap_script([render_variables(scriptObj.vars),scriptObj.body])
    }

    my.join = join
    my.map = map
    my.values = values
    my.in_array = in_array
    my.each = each
    my.extend = extend
    my.wrap_script = wrap_script
    my.render_variables = render_variables
    my.script_to_string =script_to_string

    return my;
}());

// layout start
// utils
function componentToHex(c) {
  var hex = (c).toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

function rgbToHexByColor(color) {
	var r = color.red()*255,
		g = color.green()*255,
		b = color.blue()*255
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

function is(layer, theClass){
  var klass = [layer class];
  return klass === theClass;
}

function isPage(layer){
  return is(layer, MSPage);
}

function isGroup(layer){
  return is(layer, MSLayerGroup);
}

function isText(layer){
  return is(layer, MSTextLayer);
}

function isShape(layer){
  return is(layer, MSShapeGroup);
}

function sanitize_filename(name){
    return name.replace(/(\s|:|\/)/g ,"_").replace("*","_").replace("+","_").replace("@@hidden","_").replace(/__/g,"_");
    // return name.replace(/[\/\:\*\?\"\<\>\\\|\s]/g ,"_").replace("*","_").replace("+","_").replace("@@hidden","_").replace(/__/g,"_");
}

function export_as_img( layer, filename ){
  // Actual writing of asset
  var slice,
  	rect = [layer absoluteDirtyRect],
  	filename = Config.images_folder + "/" + sanitize_filename(filename) + '.png';
  slice = [[MSSliceMaker slicesFromExportableLayer:layer inRect:rect] firstObject]
  slice.page = [[doc currentPage] copyLightweight]
  slice.format = "png"
  slice.scale = 2
  Util.log("— writing asset " + slice + " to disk: " + filename)
  var imageData = [MSSliceExporter dataForRequest:slice]
  [imageData writeToFile:filename atomically:true];
  return filename;
}

function save_file_from_string(filename,the_string) {
  var path = [@"" stringByAppendingString:filename],
      str = [@"" stringByAppendingString:the_string];

  if (in_sandbox()) {
    sandboxAccess.accessFilePath_withBlock_persistPermission(filename, function(){
      [str writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];
    }, true)
  } else {
    [str writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];
  }
}


// 获取选中图层样式-MSStyle
// var layer = context.selection[0]    
// log(layer.style().borders().array().count())
// if(layer.style().borders().array().count() > 0){
// 	log(layer.style().borders().array()[0].isEnabled())
// 	log(layer.style().borders().array()[0].thickness())
// 	log(layer.style().borders().array()[0].color())
// 	// log(layer.style().borders().array()[0].color().red()*255)
// 	// log(layer.style().borders().array()[0].color().green()*255)
// 	// log(layer.style().borders().array()[0].color().blue()*255)
// 	// log(layer.style().borders().array()[0].color().alpha())
// 	// log(rgbToHex(layer.style().borders().array()[0].color().red()*255,layer.style().borders().array()[0].color().green()*255,layer.style().borders().array()[0].color().blue()*255))
// 	// log("Hex:"+rgbToHex(layer.style().borders().array()[0].color().red()*255,layer.style().borders().array()[0].color().green()*255,layer.style().borders().array()[0].color().blue()*255))
// 	log("Hex:"+rgbToHexByColor(layer.style().borders().array()[0].color()))
// }


// 获取选中图层样式- MSTextLayer
// log(layer.fontSize())
// log(layer.fontPostscriptName())
// log(layer.textColor())
// log("Hex:"+rgbToHexByColor(layer.textColor()))
// log(layer.textAlignment())
// log(layer.characterSpacing())
// log(layer.lineSpacing())

// copy属性 
/* b: */
/*
border: 1px solid #FFFFFF;
font-family: ArialMT;
font-size: 33.65px;
color: #FF0000;
line-height: 38px;
*/

function getTextProperty(layer){
	log('=================输出图层【'+layer.name()+'】属性==================')
	
	log('font-family:'+layer.fontPostscriptName())
	log('font-size:'+layer.fontSize())
	log('color:'+Util.toRGBA(layer.textColor()))
	
	log('line-height:'+layer.lineSpacing())
	log('innerText:'+layer.stringValue())
	log('layerName:'+layer.name())
	log('parentGroup:'+layer.parentGroup().name())
	log('isVisible:'+layer.isVisible())
	getPosition(layer);

	var ret = {
		"left":layer.absoluteRect().rulerX(),
		"top":layer.absoluteRect().rulerY(),
		"width":layer.absoluteRect().width(),
		"height":layer.absoluteRect().height(),
		"color":Util.toRGBA(layer.textColor()),
		"font-family":layer.fontPostscriptName().toString()+'',
		"font-size":layer.fontSize(),
		"line-height":layer.lineSpacing(),
		"innerText":layer.stringValue().toString()+'',
		"classType":layer.class().toString()+'',
		"isVisible":layer.isVisible(),
		"parentGroup":layer.parentGroup().name().toString()+'',
		"layerName":layer.name().toString()+''
	}
	if(layer.style().borders().array().count() > 0 && layer.style().borders().array()[0].isEnabled()){
		ret.border = layer.style().borders().array()[0].thickness()+'px solid '+Util.toRGBA(layer.style().borders().array()[0].color())
	}
	if(layer.style().fills().array().count() > 0 && layer.style().fills().array()[0].isEnabled() && layer.style().fills().array()[0].fillType() == '0'){
		ret.background = Util.toRGBA(layer.style().fills().array()[0].color())
	}
    var align = ['left','right','center','justify'];
    // 需要转数值 0907 up
    var alignIndex = layer.textAlignment();
    ret['text-align'] = align[Number(alignIndex)] ? align[Number(alignIndex)] : 'inherit'
	return ret;
}

function getPosition(layer){
	log('left:'+layer.absoluteRect().rulerX())
	log('top:'+layer.absoluteRect().rulerY())
	log('width:'+layer.absoluteRect().width())
	log('height:'+layer.absoluteRect().height())
	if(layer.style().borders().array().count() > 0 && layer.style().borders().array()[0].isEnabled()){
		log('border:'+layer.style().borders().array()[0].thickness()+'px solid '+Util.toRGBA(layer.style().borders().array()[0].color()))
	}
	log('fillType:'+layer.style().fills())
	if(layer.style().fills().array().count() > 0){
	log(layer.style().fills().array()[0].isEnabled())
	log(layer.style().fills().array()[0].fillType())
	log(layer.style().fills().array()[0].color())
	}
	if(layer.style().fills().array().count() > 0 && layer.style().fills().array()[0].isEnabled() && layer.style().fills().array()[0].fillType() == '0'){
		log('fillcolor:'+layer.style().fills().array()[0].color())
	}
    if(layer.style().fills().array().count() > 0 && layer.style().fills().array()[0].isEnabled() && layer.style().fills().array()[0].fillType() == '0'){
        log('fillcolor:'+layer.style().fills().array()[0].color())
    }
}

function getImgProperty(layer){
	getPosition(layer);
    // 判断图片是否已经导出，如果已经存在，则重命名 *-index;
    var imgname = sanitize_filename(layer.name());
    var changename = sanitize_filename(layer.name());
    var i = 0;
    function checkName(){
        if(ExportImageArray.all.indexOf(changename) != -1){
           ExportImageArray.duplicate.push(changename);
           i++;
           changename = imgname + '-' + i;
           log('--------'+changename)
           checkName();
        }        
    };
    checkName();
    log(changename)
    ExportImageArray.all.push(changename);
    // 导出图片
    export_as_img(layer,changename);
	var ret = {
		"left":layer.absoluteRect().rulerX(),
		"top":layer.absoluteRect().rulerY(),
		"width":layer.absoluteRect().width(),
		"height":layer.absoluteRect().height(),
		"src":Config.images_folder + "/" + sanitize_filename(changename) + Config.export_img_ext,
		"classType":layer.class().toString()+'',
		"isVisible":layer.isVisible(),
		"parentGroup":layer.parentGroup().name().toString()+'',
		"layerName":layer.name().toString()+''
	}
	// if(layer.style().borders().array().count() > 0 && layer.style().borders().array()[0].isEnabled()){
	// 	ret.border = layer.style().borders().array()[0].thickness()+'px solid '+Util.toRGBA(layer.style().borders().array()[0].color())
	// }
	// if(layer.style().fills().array().count() > 0 && layer.style().fills().array()[0].isEnabled() && layer.style().fills().array()[0].fillType() == '0'){
	// 	ret.background = Util.toRGBA(layer.style().fills().array()[0].color())
	// }
    var borders = layer.style().borders().array(),
        fills = layer.style().fills().array(),
        shadows = layer.style().shadows(),
        innerShadows = layer.style().innerShadows()

    if( borders.count() == 1 && borders.objectAtIndex(0).isEnabled()){
        ret['border'] = borders.objectAtIndex(0).thickness() +"px solid " + Util.toRGBA( borders.objectAtIndex(0).color() )
    }
    if( fills.count() > 0 ){
        var backgrounds = []
        Util.each( fills, function(fill){
            if( fill.isEnabled() == 1 ){
                backgrounds.push( Util.toRGBA( fill.color()))
            }
        })
        backgrounds.length && ( ret['background'] = backgrounds.join(',') )
    }

    if( shadows.count() + innerShadows.count() > 0 ){
        var shadowStyles = [];
        var outShadows = [];
        Util.each( shadows, function( shadow){
            if( !shadow.isEnabled() ) return

            shadowStyles.push(
                    [shadow.offsetX(),shadow.offsetY(),shadow.blurRadius(),shadow.spread()].map(function(i){
                        return i+"px"
                    }).join(' ') + " " + Util.toRGBA( shadow.color())
            )
            outShadows.push([shadow.offsetX(),shadow.offsetY(),shadow.blurRadius(),shadow.spread()]);
        })

        Util.each( innerShadows, function( innerShadow){
            if( !innerShadow.isEnabled() ) return ;

            shadowStyles.push(
                    "inset " + [innerShadow.offsetX(),innerShadow.offsetY(),innerShadow.blurRadius(),innerShadow.spread()].map(function(i){
                    return i+"px"
                }).join(' ') + " " + Util.toRGBA( innerShadow.color())
            )
        })
        shadowStyles.length && ( ret['box-shadow'] = shadowStyles.join(','))
    }
    if(outShadows && outShadows.length){
        var resizedShadow = [0,0,0,0];
        Util.each( outShadows,function(shadow){
            resizedShadow[0] = Math.max(resizedShadow[0],shadow[0]);
            resizedShadow[1] = Math.max(resizedShadow[1],shadow[1]);
            resizedShadow[2] = Math.max(resizedShadow[2],shadow[2]);
            resizedShadow[3] = Math.max(resizedShadow[3],shadow[3]);
        });
        if(resizedShadow){
            if(resizedShadow[2] > resizedShadow[0]){
                // resize width left
                ret.width = Number(ret.width) + Number(resizedShadow[2])*2;
                ret.left = Number(ret.left) - Number(resizedShadow[2]);

            }
            else{
                ret.width = Number(ret.width) + Number(resizedShadow[0])*2;
                ret.left = Number(ret.left) - Number(resizedShadow[0]);
            }

            if(resizedShadow[2] > resizedShadow[1]){
                // resize height top
                ret.height = Number(ret.height) + Number(resizedShadow[2])*2;
                ret.top = Number(ret.top) - Number(resizedShadow[2]);
            }
            else{
                ret.height = Number(ret.height) + Number(resizedShadow[0])*2;
                ret.top = Number(ret.top) - Number(resizedShadow[0]);
            }
        }
    }
    
	return ret;	
}

function getLayersProperty(layers){
	// log(layers.name())
	var arr = layers.array();
	// log(arr.count())
	if(arr.count()){
		for(var i=0,l = arr.count();i<l;i++){
			layerClass = arr[i].class();
            var layerData ;
			log('图层'+(i+1)+':'+arr[i].name()+'||class:'+layerClass);
			if(layerClass == MSTextLayer){
				// getTextProperty(arr[i]);
                layerData = getTextProperty(arr[i]);
                // layerData.zIndex = i;
				PageLayerData.currentPageData.push(layerData);
			}
			if(layerClass === MSBitmapLayer){
				// getImgProperty(arr[i]);
                layerData = getImgProperty(arr[i]);
                // layerData.zIndex = i;
				PageLayerData.currentPageData.push(layerData);
			}
			if(layerClass === MSShapeGroup){
				layerData = getImgProperty(arr[i]);
                // layerData.zIndex = i;
                PageLayerData.currentPageData.push(layerData);
			}
			if(layerClass == MSLayerGroup || layerClass == MSArtboardGroup){
				arguments.callee(arr[i].layers());
			}
		}
	}
}


// var allExportableLayers = context.document.allExportableLayers();
// log(allExportableLayers)
// getPropoty(context.selection[0])
// log(doc)
// log([doc currentView])
// log([doc currentPage])
// log(doc.currentPage().contentBounds())
// log('图层：'+doc.currentPage().layers())
// log(doc.currentPage().layers().array()[0])
// log(doc.currentPage().layers().array()[1])
// log(doc.currentPage().layers().array()[0].layers().array()[0])
// log(doc.currentPage().layers().array()[0].layers().array()[0].class())
// log(doc.currentPage().layers().array()[0].layers().array()[0].layers().array()[0].layers().array()[0].class())


Util.log("###################")
Util.log("#### layout start ####")
Util.log("###################")

var layers = doc.currentPage().layers();
// log(layers.array().count())
var PageLayerData = {};
PageLayerData.Config = Config;
PageLayerData.currentPage = doc.currentPage().name().toString()+'';
PageLayerData.currentPageData = [];
// 导出图片数组
var ExportImageArray = {
    "all":[],
    "duplicate":[]

};
// 获取图层数据
getLayersProperty(layers);

log(PageLayerData)
log(JSON.stringify(PageLayerData))
var scriptSrc = Config.target_folder + "/data.js";

// 数据写入
Util.save_file_from_string( scriptSrc, 'var layerData = '+JSON.stringify(PageLayerData));

Util.log("###################")
Util.log("##### layout end #####")
Util.log("###################")
// log(doc.currentPage().layers().array()[1].layers().array()[1].img())
// 文本取值和设置内容
// var aa = context.selection[0];
// log([aa stringValue])
// log([aa setStringValue:'123'])
